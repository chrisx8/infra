server {
	listen 443 ssl http2;
	server_name cloud.tinynet.chrisx.xyz storage.tinynet.chrisx.xyz;

	ssl_certificate /etc/ssl/private/fullchain.pem;
	ssl_certificate_key /etc/ssl/private/privkey.pem;

	# set max upload size
	client_max_body_size 2G;
	fastcgi_buffers 64 4K;

	# Enable gzip but do not remove ETag headers
	gzip on;
	gzip_vary on;
	gzip_comp_level 4;
	gzip_min_length 256;
	gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
	gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
	add_header Referrer-Policy "no-referrer" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-Download-Options "noopen" always;
	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-Permitted-Cross-Domain-Policies "none" always;
	add_header X-Robots-Tag "none" always;
	add_header X-XSS-Protection "1; mode=block" always;

	# Remove X-Powered-By, which is an information leak
	fastcgi_hide_header X-Powered-By;

	root /var/www/nextcloud;
	index index.php index.html /index.php$request_uri;

	# handle Microsoft DAV clients
	location = / {
		if ( $http_user_agent ~ ^DavClnt ) {
			return 302 /remote.php/webdav/$is_args$args;
		}
	}

	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}

	# Make a regex exception for `/.well-known` so that clients can still
	# access it despite the existence of the regex rule
	# `location ~ /(\.|autotest|...)`
	location ^~ /.well-known {
		location = /.well-known/carddav { return 301 /remote.php/dav/; }
		location = /.well-known/caldav  { return 301 /remote.php/dav/; }
		# Let Nextcloud's API for `/.well-known` URIs handle all other
		# requests by passing them to the front-end controller.
		return 301 /index.php$request_uri;
	}

	# hide certain paths from clients
	location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) { internal; }
	location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) { internal; }

	# Ensure this block, which handles PHP, is above the blocks which handle static assets
	location ~ \.php(?:$|/) {
		fastcgi_split_path_info ^(.+?\.php)(/.*)$;
		set $path_info $fastcgi_path_info;

		try_files $fastcgi_script_name =404;

		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $path_info;
		fastcgi_param HTTPS on;
		fastcgi_param modHeadersAvailable true;
		fastcgi_param front_controller_active true;
		fastcgi_intercept_errors on;
		fastcgi_request_buffering off;

		fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	}

	location ~ \.(?:css|js|svg|gif)$ {
		try_files $uri /index.php$request_uri;
		expires 6M;
		access_log off;
	}

	location ~ \.woff2?$ {
		try_files $uri /index.php$request_uri;
		expires 7d;
		access_log off;
	}

	location /remote {
		return 301 /remote.php$request_uri;
	}

	location / {
		try_files $uri $uri/ /index.php$request_uri;
	}
}

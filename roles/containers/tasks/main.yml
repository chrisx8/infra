- name: Verify system
  ansible.builtin.assert:
    that:
      - ansible_facts.distribution_major_version|int >= 8
      - ansible_facts.os_family == 'RedHat'
      - ansible_facts.virtualization_type == 'kvm'

- name: Install Podman
  ansible.builtin.dnf:
    name: podman
    state: present

- name: Create contianer network
  containers.podman.podman_network:
    name: "{{ container_network }}"
    state: present
  when: container_network is defined

- name: Create container volumes
  containers.podman.podman_volume:
    name: "{{ item.name }}"
    state: present
  loop: "{{ container_volumes }}"
  loop_control:
    label: "{{ item.name }}"
  register: _container_volumes_create
- name: Change ownership of container volumes
  ansible.builtin.file:
    path: "{{ item.volume.Mountpoint }}"
    state: directory
    recurse: true
    owner: "{{ item.item.owner }}"
    group: "{{ item.item.group }}"
  loop: "{{ _container_volumes_create.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.changed and item.item.owner is defined and item.item.group is defined

- name: Build container images
  containers.podman.podman_image:
    name: "{{ item.name }}"
    path: "{{ item.path }}"
    force: true
    state: build
  loop: "{{ container_build_images }}"
  loop_control:
    label: "{{ item.name }}"
  when: container_build_images is defined

- name: Pull container images
  containers.podman.podman_image:
    name: "{{ item.image }}"
    force: true
    pull: true
    state: present
  loop: "{{ container_specs }}"
  loop_control:
    label: "{{ item.image }}"
  when: "'localhost/' not in item.image"

- name: Create containers
  containers.podman.podman_container: "{{ container_defaults | combine(item) }}"
  loop: "{{ container_specs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Enable and start container systemd services
  ansible.builtin.systemd:
    name: "{{ container_defaults.generate_systemd.container_prefix }}-{{ item.name }}"
    enabled: true
    daemon_reload: true
    state: restarted
  loop: "{{ container_specs }}"
  loop_control:
    label: "{{ item.name }}"

- name: Clean up container storage
  ansible.builtin.command: "podman system prune -af"
  changed_when: false

- name: Generate ct_util
  ansible.builtin.template:
    src: ct_util.j2
    dest: /usr/local/bin/ct_util
    mode: 0755

- name: Install LNMP stack
  apt:
    name: [nginx, mariadb-server, php-fpm, php-curl, php-gd, php-mysql, php-xml, composer]
    state: latest

- name: Generate new MariaDB root password
  command: "echo {{ lookup('password', '/dev/null length=64') }}"
  register: mysql_root_password
- name: Update MariaDB root password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password.stdout }}"
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
- name: Set my.cnf file for user
  template:
    src: files/my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600
- name: Delete anonymous MySQL user
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
  with_items:
    - localhost
    - "{{ ansible_nodename }}"
- name: Delete Hostname based MySQL user
  mysql_user:
    name: root
    host: "{{ ansible_nodename }}"
    state: absent
- name: Remove MySQL test database
  mysql_db:
    name: test
    state: absent

- name: Remove built-in Nginx sites (1/2)
  file:
    path: /etc/nginx/sites-available/default
    state: absent
- name: Remove built-in Nginx sites (2/2)
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
- name: Configure Nginx server (1/2)
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: server_tokens
    line: server_tokens off;
- name: Configure Nginx server (2/2)
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: ssl_protocols
    line: ssl_protocols TLSv1.2 TLSv1.3;
- name: Install Nginx global configurations
  copy:
    src: nginx/_global/conf.d
    dest: /etc/nginx/
    directory_mode: true
- name: Install Nginx configurations
  copy:
    src: nginx/webhosts/conf.d
    dest: /etc/nginx/
    directory_mode: true
- name: Install Nginx snippets
  copy:
    src: nginx/webhosts/snippets
    dest: /etc/nginx/
    directory_mode: true
- name: Reload Nginx
  systemd:
    name: nginx
    state: reloaded

- name: Install Dashboard
  copy:
    src: dashboard/
    dest: /var/www/html/

- name: Create BookStack database
  mysql_db:
    name: bookstack
    state: present
- name: Generate new password for bookstack user
  command: "echo {{ lookup('password', '/dev/null length=64') }}"
  register: mysql_bookstack_password
- name: Create MySQL user - bookstack
  mysql_user:
    name: bookstack
    host: localhost
    password: "{{ mysql_bookstack_password.stdout }}"
    priv:
      'bookstack.*': 'ALL'
    state: present

- name: Download BookStack
  git:
    repo: https://github.com/BookStackApp/BookStack.git
    dest: /var/www/bookstack
    version: release
    depth: 1
- name: BookStack - Set permissions (1/3)
  file:
    path: /var/www/bookstack/storage
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: BookStack - Set permissions (2/3)
  file:
    path: /var/www/bookstack/bootstrap/cache
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: BookStack - Set permissions (3/3)
  file:
    path: /var/www/bookstack/public/uploads
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: BookStack - Install config
  template:
    src: files/bookstack.env.j2
    dest: /var/www/bookstack/.env
- name: BookStack - Composer install
  shell:
    chdir: /var/www/bookstack
    cmd: composer install --no-dev
- name: BookStack - Generate new key
  shell:
    chdir: /var/www/bookstack  
    cmd: "php artisan key:generate --force"
- name: BookStack - Database migration
  shell:
    chdir: /var/www/bookstack
    cmd: "php artisan migrate --force"

- name: Check if FreshRSS is installed
  stat:
    path: /var/www/html/freshrss
  register: freshrss_stat
- name: Create FreshRSS database
  mysql_db:
    name: freshrss
    state: present
- name: Generate new password for freshrss user
  when: not freshrss_stat.stat.exists
  command: "echo {{ lookup('password', '/dev/null length=64') }}"
  register: mysql_freshrss_password
- name: Create MySQL user - freshrss
  when: not freshrss_stat.stat.exists
  mysql_user:
    name: freshrss
    host: localhost
    password: "{{ mysql_freshrss_password.stdout }}"
    priv:
      'freshrss.*': 'ALL'
    state: present

- name: Download FreshRSS
  git:
    repo: https://github.com/FreshRSS/FreshRSS.git
    dest: /var/www/html/freshrss
    version: master
    depth: 1
- name: FreshRSS - Set permissions
  file:
    path: /var/www/html/freshrss/data
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: Prompt for FreshRSS setup
  when: not freshrss_stat.stat.exists
  pause:
    prompt: "Finish FreshRSS installation at /freshrss \n
    Database: MySQL server on localhost \n
    DB Name: freshrss \n
    DB Username: freshrss \n
    DB Password: {{ mysql_freshrss_password.stdout }} \n\n
  "

- name: Install LNMP stack
  apt:
    name: [nginx, mariadb-server, php-fpm, php-curl, php-gd, php-mysql, php-xml, composer]
    state: latest

- name: Generate new MariaDB root password
  command: "echo {{ lookup('password', '/dev/null length=64') }}"
  register: mysql_root_password
- name: Update MariaDB root password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password.stdout }}"
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
- name: Set my.cnf file for user
  template:
    src: files/my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600
- name: Delete anonymous MySQL user
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
  with_items:
    - localhost
    - "{{ ansible_nodename }}"
- name: Delete Hostname based MySQL user
  mysql_user:
    name: root
    host: "{{ ansible_nodename }}"
    state: absent
- name: Remove MySQL test database
  mysql_db:
    name: test
    state: absent

- name: Remove built-in Nginx sites (1/2)
  file:
    path: /etc/nginx/sites-available/default
    state: absent
- name: Remove built-in Nginx sites (2/2)
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
- name: Configure Nginx server (1/2)
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: server_tokens
    line: server_tokens off;
- name: Configure Nginx server (2/2)
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: ssl_protocols
    line: ssl_protocols TLSv1.2 TLSv1.3;
- name: Install Nginx configurations
  copy:
    src: nginx-webhosts/conf.d
    dest: /etc/nginx/
    directory_mode: true
- name: Install Nginx snippets
  copy:
    src: nginx-webhosts/snippets
    dest: /etc/nginx/
    directory_mode: true
- name: Reload Nginx
  systemd:
    name: nginx
    state: reloaded

- name: Install Dashboard
  copy:
    src: dashboard/
    dest: /var/www/html/

- name: Generate oauth2-proxy secret 1/2
  command: "python3 -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())'"
  register: cookie_secret_1
- name: Generate oauth2-proxy secret 2/2
  command: "python3 -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())'"
  register: cookie_secret_2
- name: Install oauth2-proxy configurations 1/2
  when: client_id and client_secret
  template:
    src: oauth2-proxy/internal.cfg.j2
    dest: /opt/oauth2-proxy/internal.cfg
- name: Install oauth2-proxy configurations 2/2
  when: client_id and client_secret
  template:
    src: oauth2-proxy/external.cfg.j2
    dest: /opt/oauth2-proxy/external.cfg
- name: Download oauth2-proxy
  shell: curl -s https://api.github.com/repos/oauth2-proxy/oauth2-proxy/releases/latest | 
         grep 'linux-amd64.tar' | cut -d '"' -f 4 | tail -n1 | 
         xargs curl -L -o /opt/oauth2-proxy/oauth2-proxy.tgz
- name: Extract oauth2-proxy
  shell:
    chdir: /opt/oauth2-proxy
    cmd: tar -xf oauth2-proxy.tgz || true
- name: Move oauth2-proxy binary
  shell: mv /opt/oauth2-proxy/oauth2-proxy-*/oauth2-proxy /opt/oauth2-proxy/
- name: Remove oauth2-proxy tarball
  file:
    path: /opt/oauth2-proxy/oauth2-proxy.tgz
    state: absent
- name: Clean up oauth2-proxy download
  shell: rm -r /opt/oauth2-proxy/oauth2-proxy-*
- name: Set up systemd service for oauth2-proxy (internal)
  copy:
    src: files/oauth2-proxy-internal.service
    dest: /etc/systemd/system/
    owner: root
    group: root
- name: Set up systemd service for oauth2-proxy (external)
  copy:
    src: files/oauth2-proxy-external.service
    dest: /etc/systemd/system
    owner: root
    group: root
- name: Start oauth2-proxy (internal)
  systemd:
    name: oauth2-proxy-internal
    state: restarted
    enabled: true
    daemon-reload: true
- name: Start oauth2-proxy (external)
  systemd:
    name: oauth2-proxy-external
    state: restarted
    enabled: true
    daemon-reload: true

- name: Create BookStack database
  mysql_db:
    name: bookstack
    state: present
- name: Generate new password for bookstack user
  command: "echo {{ lookup('password', '/dev/null length=64') }}"
  register: mysql_bookstack_password
- name: Create MySQL user - bookstack
  mysql_user:
    name: bookstack
    host: localhost
    password: "{{ mysql_bookstack_password.stdout }}"
    priv:
      'bookstack.*': 'ALL'
    state: present

- name: Download BookStack
  git:
    repo: https://github.com/BookStackApp/BookStack.git
    dest: /var/www/bookstack
    version: release
    depth: 1
- name: BookStack - Set permissions (1/3)
  file:
    path: /var/www/bookstack/storage
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: BookStack - Set permissions (2/3)
  file:
    path: /var/www/bookstack/bootstrap/cache
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: BookStack - Set permissions (3/3)
  file:
    path: /var/www/bookstack/public/uploads
    state: directory
    recurse: true
    owner: www-data
    group: www-data
- name: BookStack - Install config
  when: client_id and client_secret
  template:
    src: files/bookstack.env.j2
    dest: /var/www/bookstack/.env
- name: BookStack - Composer install
  shell:
    chdir: /var/www/bookstack
    cmd: composer install --no-dev
- name: BookStack - Generate new key
  shell:
    chdir: /var/www/bookstack  
    cmd: "php artisan key:generate --force"
- name: BookStack - Database migration
  shell:
    chdir: /var/www/bookstack
    cmd: "php artisan migrate --force"

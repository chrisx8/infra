---
- name: Generate container spec
  ansible.builtin.set_fact:
    _container_spec: "{{ cx_container_app_spec | combine(_container_defaults) }}"

- name: Generate systemd unit name
  ansible.builtin.set_fact:
    _container_systemd_unit: "{{ _container_spec.generate_systemd.container_prefix }}-{{ _container_spec.name }}"

- name: Create network
  throttle: 1
  when: cx_container_app_network
  containers.podman.podman_network:
    name: "{{ cx_container_app_network }}"
    state: present

- name: Create volumes
  loop: "{{ cx_container_app_volumes }}"
  when: cx_container_app_volumes
  containers.podman.podman_volume:
    name: "{{ item }}"
    state: present

- name: Pull image
  containers.podman.podman_image:
    name: "{{ _container_spec.image }}"
    force: true
    pull: true
    state: present

- name: Disable and stop systemd service
  failed_when: false
  ansible.builtin.systemd:
    name: "{{ _container_systemd_unit }}.service"
    enabled: false
    scope: user
    state: stopped

- name: Create container
  containers.podman.podman_container: "{{ _container_spec }}"

- name: Set up systemd socket activation
  when: cx_container_app_socket_listen_streams
  block:
    - name: Generate systemd socket config
      ansible.builtin.template:
        src: container.socket.j2
        dest: "{{ _container_spec.generate_systemd.path }}/{{ _container_systemd_unit }}.socket"
        mode: "0640"
    - name: Enable and restart systemd socket
      ansible.builtin.systemd:
        name: "{{ _container_systemd_unit }}.socket"
        daemon_reload: true
        enabled: true
        scope: user
        state: restarted

- name: Enable and start systemd service
  ansible.builtin.systemd:
    name: "{{ _container_systemd_unit }}.service"
    daemon_reload: true
    enabled: true
    scope: user
    state: started

---
- name: Verify system requirements
  ansible.builtin.assert:
    that:
      - ansible_facts.distribution_major_version|int >= 8
      - ansible_facts.os_family == 'RedHat'

- name: Validate cx_container_app vars
  ansible.builtin.assert:
    that:
      - cx_container_app_state in ('present', 'absent')
      - cx_container_app_image | length > 0
      - cx_container_app_user | length > 0

- name: Confirm resource removal
  run_once: true
  when: cx_container_app_state == 'absent'
  ansible.builtin.include_tasks: confirm_absent.yml

- name: Get user {{ cx_container_app_user }}
  register: _container_user # noqa: var-naming[no-role-prefix]
  ansible.builtin.user:
    name: "{{ cx_container_app_user }}"
    state: present

- name: Check if network should be deployed
  ansible.builtin.set_fact:
    # noqa: var-naming[no-role-prefix]
    _quadlet_need_network: "{{ cx_container_app_network and cx_container_app_network not in ('host', 'podman') }}"

- name: Build systemd deployment facts
  ansible.builtin.set_fact:
    # noqa: var-naming[no-role-prefix]
    _quadlet_files: |-
      {% set _result = [cx_container_app_name + '.container'] %}
      {% if _quadlet_need_network %}
      {% set _ = _result.append(cx_container_app_network + '.network') %}
      {% endif %}
      {% for volume in cx_container_app_volumes %}
      {% set _ = _result.append(volume + '.volume') %}
      {% endfor %}
      {{ _result }}
    _systemd_units: |-
      {% set _result = [cx_container_app_name + '.service'] %}
      {% if _quadlet_need_network %}
      {% set _ = _result.append(cx_container_app_network + '-network.service') %}
      {% endif %}
      {% for volume in cx_container_app_volumes %}
      {% set _ = _result.append(volume + '-volume.service') %}
      {% endfor %}
      {{ _result }}
    _systemd_container_dir: "{{ (cx_container_app_user == 'root') |
      ternary('/etc/containers/systemd', '~/.config/containers/systemd') }}"
    _systemd_scope: "{{ (cx_container_app_user == 'root') | ternary('system', 'user') }}"

- name: Run as {{ cx_container_app_user }}
  become: true
  become_user: "{{ cx_container_app_user }}"
  ansible.builtin.import_tasks: container_{{ cx_container_app_state }}.yml

- name: Prompt
  hosts: localhost
  gather_facts: false
  vars_prompt:
    - name: upgrade_ssl_certs
      prompt: "Upgrade SSL certs? (y/n)"
      private: false
    - name: upgrade_containers
      prompt: "Upgrade containers? (y/n)"
      private: false
    - name: upgrade_jellyfin
      prompt: "Upgrade Jellyfin? (y/n)"
      private: false
    - name: upgrade_launcher
      prompt: "Upgrade Launcher? (y/n)"
      private: false
  tasks:
    - name: Store prompt inputs
      ansible.builtin.set_fact:
        upgrade_ssl_certs: "{{ upgrade_ssl_certs }}"
        upgrade_containers: "{{ upgrade_containers }}"
        upgrade_jellyfin: "{{ upgrade_jellyfin }}"
        upgrade_launcher: "{{ upgrade_launcher }}"

- name: Upgrade proxmox
  hosts: proxmox1
  gather_facts: false
  become: true
  tasks:
    - name: Install SSL cert for Proxmox
      ansible.builtin.import_role:
        name: sys/proxmox
        tasks_from: ssl_cert.yml
      when: hostvars['localhost']['upgrade_ssl_certs'] == 'y'

- name: Upgrade storage
  hosts: storage
  gather_facts: true
  gather_subset: 'distribution'
  become: true
  tasks:
    - name: Install certs
      block:
        - name: Install SSL cert for Cockpit
          ansible.builtin.import_role:
            name: inf/cockpit
            tasks_from: ssl_cert.yml
        - name: Install SSL cert for Jellyfin
          ansible.builtin.import_role:
            name: app/jellyfin
            tasks_from: ssl_cert.yml
      when: hostvars['localhost']['upgrade_ssl_certs'] == 'y'
    - name: Install Jellyfin
      ansible.builtin.import_role:
        name: app/jellyfin
      when: hostvars['localhost']['upgrade_jellyfin'] == 'y'

- name: Upgrade all
  hosts: all
  gather_facts: true
  gather_subset: '!all'
  become: true
  tasks:
    - name: Update SSL certs
      block:
        - name: Check if chrisx.xyz cert exists
          ansible.builtin.stat:
            path: /etc/ssl/chrisx.xyz
          register: ssl_check
        - name: Install chrisx.xyz cert
          ansible.builtin.import_role:
            name: inf/ssl
            tasks_from: chrisx.yml
          when: ssl_check.stat.exists
        - name: Check if arb.chrisx.xyz cert exists
          ansible.builtin.stat:
            path: /etc/ssl/arb.chrisx.xyz
          register: arb_ssl_check
        - name: Install arb.chrisx.xyz cert
          ansible.builtin.import_role:
            name: inf/ssl
            tasks_from: arb.yml
          when: arb_ssl_check.stat.exists
    - name: Upgrade packages (apt)
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
      when: "ansible_facts.os_family == 'Debian'"
    - name: Upgrade packages (dnf)
      ansible.builtin.dnf:
        name: "*"
        update_cache: true
        state: latest
      when: "ansible_facts.os_family == 'RedHat'"
    - name: Autoremove unneeded packages (dnf)
      ansible.builtin.dnf:
        autoremove: true
      when: "ansible_facts.os_family == 'RedHat'"

- name: Roll postgres databases
  hosts: db-postgres
  gather_facts: false
  become: true
  become_user: postgres
  tasks:
    - name: Fix cert permission on db-postgres
      ansible.builtin.file:
        path: /etc/ssl/arb.chrisx.xyz
        owner: postgres
        group: postgres
        recurse: true
      when: hostvars['localhost']['upgrade_ssl_certs'] == 'y'
    - name: Set up Postgres databases for container apps
      ansible.builtin.import_role:
        name: app/containers
        tasks_from: create_postgres_db.yml
      when: hostvars['localhost']['upgrade_containers'] == 'y'

- name: Upgrade containers
  hosts: web-container
  gather_facts: false
  become: true
  tasks:
    - name: Install container apps
      ansible.builtin.import_role:
        name: app/containers
      when: hostvars['localhost']['upgrade_containers'] == 'y'

- name: Upgrade php apps
  hosts: web-php
  gather_facts: false
  tasks:
    - name: Install launcher
      ansible.builtin.import_role:
        name: app/tinynet_launcher
      when: hostvars['localhost']['upgrade_launcher'] == 'y'
